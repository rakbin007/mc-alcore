{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExponentMagnetometer from \"./ExponentMagnetometer\";\nexport var MagnetometerSensor = function (_DeviceSensor) {\n  _inherits(MagnetometerSensor, _DeviceSensor);\n  var _super = _createSuper(MagnetometerSensor);\n  function MagnetometerSensor() {\n    _classCallCheck(this, MagnetometerSensor);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MagnetometerSensor, [{\n    key: \"isAvailableAsync\",\n    value: function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _get(_getPrototypeOf(MagnetometerSensor.prototype), \"isAvailableAsync\", this).call(this);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }()\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _get(_getPrototypeOf(MagnetometerSensor.prototype), \"addListener\", this).call(this, listener);\n    }\n  }]);\n  return MagnetometerSensor;\n}(DeviceSensor);\nexport default new MagnetometerSensor(ExponentMagnetometer, 'magnetometerDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExponentMagnetometer","MagnetometerSensor","_DeviceSensor","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_get","_getPrototypeOf","prototype","call","isAvailableAsync","addListener","listener"],"sources":["/Users/rbsung/Documents/mobile-computing/final/node_modules/expo-sensors/src/Magnetometer.ts"],"sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExponentMagnetometer from './ExponentMagnetometer';\n\n/**\n * Each of these keys represents the strength of magnetic field along that particular axis measured in microteslas (`Î¼T`).\n */\nexport type MagnetometerMeasurement = {\n  /**\n   * Value representing strength of magnetic field recorded in X axis.\n   */\n  x: number;\n  /**\n   * Value representing strength of magnetic field recorded in Y axis.\n   */\n  y: number;\n  /**\n   * Value representing strength of magnetic field recorded in Z axis.\n   */\n  z: number;\n};\n\n/**\n * @platform android\n * @platform ios\n */\nexport class MagnetometerSensor extends DeviceSensor<MagnetometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the magnetometer.\n   * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `MagnetometerMeasurement`.\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<MagnetometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new MagnetometerSensor(ExponentMagnetometer, 'magnetometerDidUpdate');\n"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAY;AAEnB,OAAOC,oBAAoB;AAwB3B,WAAaC,kBAAmB,aAAAC,aAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA;EAAA,SAAAA,mBAAA;IAAAK,eAAA,OAAAL,kBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,kBAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAO9B,aAAsB;QACpB,OAAAC,IAAA,CAAAC,eAAA,CAAAd,kBAAA,CAAAe,SAAA,6BAAAC,IAAA;MACF,CAAC;MAAA,SAAAC,iBAAA;QAAA,OAAAN,iBAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAU,gBAAA;IAAA;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOD,SAAAQ,YAAYC,QAA2C;MACrD,OAAAN,IAAA,CAAAC,eAAA,CAAAd,kBAAA,CAAAe,SAAA,wBAAAC,IAAA,OAAyBG,QAAQ;IACnC;EAAC;EAAA,OAAAnB,kBAAA;AAAA,EAlBqCF,YAAqC;AAqB7E,eAAe,IAAIE,kBAAkB,CAACD,oBAAoB,EAAE,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}