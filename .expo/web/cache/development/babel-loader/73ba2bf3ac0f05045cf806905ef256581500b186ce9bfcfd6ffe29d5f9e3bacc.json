{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExpoLightSensor from \"./ExpoLightSensor\";\nexport var LightSensor = function (_DeviceSensor) {\n  _inherits(LightSensor, _DeviceSensor);\n  var _super = _createSuper(LightSensor);\n  function LightSensor() {\n    _classCallCheck(this, LightSensor);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LightSensor, [{\n    key: \"isAvailableAsync\",\n    value: function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _get(_getPrototypeOf(LightSensor.prototype), \"isAvailableAsync\", this).call(this);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }()\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _get(_getPrototypeOf(LightSensor.prototype), \"addListener\", this).call(this, listener);\n    }\n  }]);\n  return LightSensor;\n}(DeviceSensor);\nexport default new LightSensor(ExpoLightSensor, 'lightSensorDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExpoLightSensor","LightSensor","_DeviceSensor","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_get","_getPrototypeOf","prototype","call","isAvailableAsync","addListener","listener"],"sources":["/Users/rbsung/Documents/mobile-computing/final/node_modules/expo-sensors/src/LightSensor.ts"],"sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExpoLightSensor from './ExpoLightSensor';\n\nexport type LightSensorMeasurement = {\n  /**\n   * Ambient light level registered by the device measured in lux (lx).\n   */\n  illuminance: number;\n};\n\n/**\n * @platform android\n */\nexport class LightSensor extends DeviceSensor<LightSensorMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the light sensor is available and enabled on the device. Requires at least Android 2.3 (API Level 9).\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of the light sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the light sensor.\n   *\n   * @param listener A callback that is invoked when a LightSensor update is available. When invoked,\n   * the listener is provided a single argument that is the illuminance value.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<LightSensorMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new LightSensor(ExpoLightSensor, 'lightSensorDidUpdate');\n"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAY;AAEnB,OAAOC,eAAe;AAYtB,WAAaC,WAAY,aAAAC,aAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EAAA,SAAAA,YAAA;IAAAK,eAAA,OAAAL,WAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,WAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAQvB,aAAsB;QACpB,OAAAC,IAAA,CAAAC,eAAA,CAAAd,WAAA,CAAAe,SAAA,6BAAAC,IAAA;MACF,CAAC;MAAA,SAAAC,iBAAA;QAAA,OAAAN,iBAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAU,gBAAA;IAAA;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAUD,SAAAQ,YAAYC,QAA0C;MACpD,OAAAN,IAAA,CAAAC,eAAA,CAAAd,WAAA,CAAAe,SAAA,wBAAAC,IAAA,OAAyBG,QAAQ;IACnC;EAAC;EAAA,OAAAnB,WAAA;AAAA,EAtB8BF,YAAoC;AAyBrE,eAAe,IAAIE,WAAW,CAACD,eAAe,EAAE,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}