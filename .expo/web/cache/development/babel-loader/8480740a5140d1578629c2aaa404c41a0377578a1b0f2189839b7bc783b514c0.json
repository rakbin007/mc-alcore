{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { PermissionStatus, EventEmitter, Platform } from 'expo-modules-core';\nvar DeviceSensor = function () {\n  function DeviceSensor(nativeSensorModule, nativeEventName) {\n    _classCallCheck(this, DeviceSensor);\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new EventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n    this._listenerCount = 0;\n  }\n  _createClass(DeviceSensor, [{\n    key: \"addListener\",\n    value: function addListener(listener) {\n      var _this = this;\n      var subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);\n      subscription.remove = function () {\n        return _this.removeSubscription(subscription);\n      };\n      this._listenerCount++;\n      return subscription;\n    }\n  }, {\n    key: \"hasListeners\",\n    value: function hasListeners() {\n      return this._listenerCount > 0;\n    }\n  }, {\n    key: \"getListenerCount\",\n    value: function getListenerCount() {\n      return this._listenerCount;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listenerCount = 0;\n      this._nativeEmitter.removeAllListeners(this._nativeEventName);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      this._listenerCount--;\n      this._nativeEmitter.removeSubscription(subscription);\n    }\n  }, {\n    key: \"setUpdateInterval\",\n    value: function setUpdateInterval(intervalMs) {\n      if (!this._nativeModule.setUpdateInterval) {\n        console.warn(\"expo-sensors: setUpdateInterval() is not supported on \" + Platform.OS);\n      } else {\n        this._nativeModule.setUpdateInterval(intervalMs);\n      }\n    }\n  }, {\n    key: \"isAvailableAsync\",\n    value: function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        if (!this._nativeModule.isAvailableAsync) {\n          return false;\n        } else {\n          return yield this._nativeModule.isAvailableAsync();\n        }\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }()\n  }, {\n    key: \"getPermissionsAsync\",\n    value: function () {\n      var _getPermissionsAsync = _asyncToGenerator(function* () {\n        if (!this._nativeModule.getPermissionsAsync) {\n          return defaultPermissionsResponse;\n        } else {\n          return yield this._nativeModule.getPermissionsAsync();\n        }\n      });\n      function getPermissionsAsync() {\n        return _getPermissionsAsync.apply(this, arguments);\n      }\n      return getPermissionsAsync;\n    }()\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function () {\n      var _requestPermissionsAsync = _asyncToGenerator(function* () {\n        if (!this._nativeModule.requestPermissionsAsync) {\n          return defaultPermissionsResponse;\n        } else {\n          return yield this._nativeModule.requestPermissionsAsync();\n        }\n      });\n      function requestPermissionsAsync() {\n        return _requestPermissionsAsync.apply(this, arguments);\n      }\n      return requestPermissionsAsync;\n    }()\n  }]);\n  return DeviceSensor;\n}();\nexport { DeviceSensor as default };\nvar defaultPermissionsResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED\n};\nexport { PermissionStatus };","map":{"version":3,"names":["PermissionStatus","EventEmitter","Platform","DeviceSensor","nativeSensorModule","nativeEventName","_classCallCheck","_nativeModule","_nativeEmitter","_nativeEventName","_listenerCount","_createClass","key","value","addListener","listener","_this","subscription","remove","removeSubscription","hasListeners","getListenerCount","removeAllListeners","setUpdateInterval","intervalMs","console","warn","OS","_isAvailableAsync","_asyncToGenerator","isAvailableAsync","apply","arguments","_getPermissionsAsync","getPermissionsAsync","defaultPermissionsResponse","_requestPermissionsAsync","requestPermissionsAsync","default","granted","expires","canAskAgain","status","GRANTED"],"sources":["/Users/rbsung/Documents/mobile-computing/final/node_modules/expo-sensors/src/DeviceSensor.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  EventEmitter,\n  Subscription,\n  Platform,\n  PermissionExpiration,\n} from 'expo-modules-core';\n\n/**\n * @hidden\n */\nexport type Listener<E> = (event: E) => void;\n\ntype NativeSensorModule = any;\n\n/**\n * A base class for subscribable sensors. The events emitted by this class are measurements\n * specified by the parameter type `Measurement`.\n */\nexport default class DeviceSensor<Measurement> {\n  _nativeModule: NativeSensorModule;\n  _nativeEmitter: EventEmitter;\n  _nativeEventName: string;\n  _listenerCount: number;\n\n  constructor(nativeSensorModule: NativeSensorModule, nativeEventName: string) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new EventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n    this._listenerCount = 0;\n  }\n\n  addListener(listener: Listener<Measurement>): Subscription {\n    const subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);\n    subscription.remove = () => this.removeSubscription(subscription);\n    this._listenerCount++;\n    return subscription;\n  }\n\n  /**\n   * Returns boolean which signifies if sensor has any listeners registered.\n   */\n  hasListeners(): boolean {\n    return this._listenerCount > 0;\n  }\n\n  /**\n   * Returns the registered listeners count.\n   */\n  getListenerCount(): number {\n    return this._listenerCount;\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners(): void {\n    this._listenerCount = 0;\n    this._nativeEmitter.removeAllListeners(this._nativeEventName);\n  }\n\n  /**\n   * Removes the given subscription.\n   * @param subscription A subscription to remove.\n   */\n  removeSubscription(subscription: Subscription): void {\n    this._listenerCount--;\n    this._nativeEmitter.removeSubscription(subscription);\n  }\n\n  /**\n   * Set the sensor update interval.\n   *\n   * @param intervalMs Desired interval in milliseconds between sensor updates.\n   * > Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.\n   * >\n   * > If you need an update interval less than 200ms, you should:\n   * > * add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [**app.json** `permissions` field](/versions/latest/config/app/#permissions)\n   * > * or if you are using bare workflow, add `<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\"/>` to **AndroidManifest.xml**.\n   */\n  setUpdateInterval(intervalMs: number): void {\n    if (!this._nativeModule.setUpdateInterval) {\n      console.warn(`expo-sensors: setUpdateInterval() is not supported on ${Platform.OS}`);\n    } else {\n      this._nativeModule.setUpdateInterval(intervalMs);\n    }\n  }\n\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    if (!this._nativeModule.isAvailableAsync) {\n      return false;\n    } else {\n      return await this._nativeModule.isAvailableAsync();\n    }\n  }\n\n  /**\n   * Checks user's permissions for accessing sensor.\n   */\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    if (!this._nativeModule.getPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return await this._nativeModule.getPermissionsAsync();\n    }\n  }\n\n  /**\n   * Asks the user to grant permissions for accessing sensor.\n   */\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    if (!this._nativeModule.requestPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return await this._nativeModule.requestPermissionsAsync();\n    }\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport { PermissionStatus };\nexport type { Subscription, PermissionResponse, PermissionExpiration };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}