{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExponentGyroscope from \"./ExponentGyroscope\";\nexport var GyroscopeSensor = function (_DeviceSensor) {\n  _inherits(GyroscopeSensor, _DeviceSensor);\n  var _super = _createSuper(GyroscopeSensor);\n  function GyroscopeSensor() {\n    _classCallCheck(this, GyroscopeSensor);\n    return _super.apply(this, arguments);\n  }\n  _createClass(GyroscopeSensor, [{\n    key: \"isAvailableAsync\",\n    value: function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _get(_getPrototypeOf(GyroscopeSensor.prototype), \"isAvailableAsync\", this).call(this);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }()\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _get(_getPrototypeOf(GyroscopeSensor.prototype), \"addListener\", this).call(this, listener);\n    }\n  }]);\n  return GyroscopeSensor;\n}(DeviceSensor);\nexport default new GyroscopeSensor(ExponentGyroscope, 'gyroscopeDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExponentGyroscope","GyroscopeSensor","_DeviceSensor","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_get","_getPrototypeOf","prototype","call","isAvailableAsync","addListener","listener"],"sources":["/Users/rbsung/Documents/mobile-computing/final/node_modules/expo-sensors/src/Gyroscope.ts"],"sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExponentGyroscope from './ExponentGyroscope';\n\n/**\n * Each of these keys represents the rotation along that particular axis measured in degrees per second (Â°/s).\n */\nexport type GyroscopeMeasurement = {\n  /**\n   * Value of rotation in degrees per second device reported in X axis.\n   */\n  x: number;\n  /**\n   * Value of rotation in degrees per second device reported in Y axis.\n   */\n  y: number;\n  /**\n   * Value of rotation in degrees per second device reported in Z axis.\n   */\n  z: number;\n};\n\nexport class GyroscopeSensor extends DeviceSensor<GyroscopeMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the gyroscope is enabled on the device.\n   *\n   * On mobile web, you must first invoke `Gyroscope.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module.\n   * If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.\n   *\n   * On **web** this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the **device orientation** API disabled in\n   * **Settings > Safari > Motion & Orientation Access**. Some devices will also not fire if the site isn't hosted with **HTTPS** as `DeviceMotion` is now considered a secure API.\n   * There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of the gyroscope.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the accelerometer.\n   *\n   * @param listener A callback that is invoked when an accelerometer update is available. When invoked,\n   * the listener is provided a single argument that is an `GyroscopeMeasurement` object.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<GyroscopeMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new GyroscopeSensor(ExponentGyroscope, 'gyroscopeDidUpdate');\n"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAY;AAEnB,OAAOC,iBAAiB;AAoBxB,WAAaC,eAAgB,aAAAC,aAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAAA,SAAAA,gBAAA;IAAAK,eAAA,OAAAL,eAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,eAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAe3B,aAAsB;QACpB,OAAAC,IAAA,CAAAC,eAAA,CAAAd,eAAA,CAAAe,SAAA,6BAAAC,IAAA;MACF,CAAC;MAAA,SAAAC,iBAAA;QAAA,OAAAN,iBAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAU,gBAAA;IAAA;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAUD,SAAAQ,YAAYC,QAAwC;MAClD,OAAAN,IAAA,CAAAC,eAAA,CAAAd,eAAA,CAAAe,SAAA,wBAAAC,IAAA,OAAyBG,QAAQ;IACnC;EAAC;EAAA,OAAAnB,eAAA;AAAA,EA7BkCF,YAAkC;AAgCvE,eAAe,IAAIE,eAAe,CAACD,iBAAiB,EAAE,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}