{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExpoBarometer from \"./ExpoBarometer\";\nexport var BarometerSensor = function (_DeviceSensor) {\n  _inherits(BarometerSensor, _DeviceSensor);\n  var _super = _createSuper(BarometerSensor);\n  function BarometerSensor() {\n    _classCallCheck(this, BarometerSensor);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BarometerSensor, [{\n    key: \"isAvailableAsync\",\n    value: function () {\n      var _isAvailableAsync = _asyncToGenerator(function* () {\n        return _get(_getPrototypeOf(BarometerSensor.prototype), \"isAvailableAsync\", this).call(this);\n      });\n      function isAvailableAsync() {\n        return _isAvailableAsync.apply(this, arguments);\n      }\n      return isAvailableAsync;\n    }()\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      return _get(_getPrototypeOf(BarometerSensor.prototype), \"addListener\", this).call(this, listener);\n    }\n  }]);\n  return BarometerSensor;\n}(DeviceSensor);\nexport default new BarometerSensor(ExpoBarometer, 'barometerDidUpdate');","map":{"version":3,"names":["DeviceSensor","ExpoBarometer","BarometerSensor","_DeviceSensor","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_isAvailableAsync","_asyncToGenerator","_get","_getPrototypeOf","prototype","call","isAvailableAsync","addListener","listener"],"sources":["/Users/rbsung/Documents/mobile-computing/final/node_modules/expo-sensors/src/Barometer.ts"],"sourcesContent":["import type { Listener, Subscription } from './DeviceSensor';\nimport DeviceSensor from './DeviceSensor';\nimport ExpoBarometer from './ExpoBarometer';\n\n/**\n * The altitude data returned from the native sensors.\n */\nexport type BarometerMeasurement = {\n  /**\n   * Measurement in hectopascals (`hPa`).\n   */\n  pressure: number;\n  /**\n   * Measurement in meters (`m`).\n   * @platform ios\n   */\n  relativeAltitude?: number;\n};\n\n/**\n * @platform android\n * @platform ios\n */\nexport class BarometerSensor extends DeviceSensor<BarometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the barometer.\n   * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `BarometerMeasurement`.\n   *\n   * @example\n   * ```ts\n   * const subscription = Barometer.addListener(({ pressure, relativeAltitude }) => {\n   *   console.log({ pressure, relativeAltitude });\n   * });\n   * ```\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<BarometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new BarometerSensor(ExpoBarometer, 'barometerDidUpdate');\n"],"mappings":";;;;;;;;;AACA,OAAOA,YAAY;AACnB,OAAOC,aAAa;AAqBpB,WAAaC,eAAgB,aAAAC,aAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAAA,SAAAA,gBAAA;IAAAK,eAAA,OAAAL,eAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,eAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAO3B,aAAsB;QACpB,OAAAC,IAAA,CAAAC,eAAA,CAAAd,eAAA,CAAAe,SAAA,6BAAAC,IAAA;MACF,CAAC;MAAA,SAAAC,iBAAA;QAAA,OAAAN,iBAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAU,gBAAA;IAAA;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAcD,SAAAQ,YAAYC,QAAwC;MAClD,OAAAN,IAAA,CAAAC,eAAA,CAAAd,eAAA,CAAAe,SAAA,wBAAAC,IAAA,OAAyBG,QAAQ;IACnC;EAAC;EAAA,OAAAnB,eAAA;AAAA,EAzBkCF,YAAkC;AA4BvE,eAAe,IAAIE,eAAe,CAACD,aAAa,EAAE,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}